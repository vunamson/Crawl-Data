import random, time
import pandas as pd
from sys import _xoptions
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import undetected_chromedriver as uc
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.common.exceptions import NoSuchElementException, TimeoutException
from selenium.webdriver.support import expected_conditions as EC

# === C·∫•u h√¨nh Google Sheets ===
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name(r"C:\Crawl Data Git\Crawl-Data\credentials.json", scope)
client = gspread.authorize(creds)
sheet = client.open_by_key("1c_omcHE3AMkUBxFS1Cckwcw0A-fBX5FV6dbJYn_Jg5s").worksheet("CRAWL")
urls = sheet.col_values(1)[1:]
extra_data = sheet.col_values(2)[1:]
desc_data = sheet.col_values(3)[1:] if len(sheet.row_values(3)) >= 3 else []
price_data = sheet.col_values(4)[1:] if len(sheet.row_values(4)) >= 4 else []

# === H√†m ti·ªán √≠ch ===
def get_random_user_agent():
    chrome_version = f"{random.randint(2, 200)}.0.0.0"
    return f"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/{chrome_version} Safari/537.36"

def create_driver():
    options = uc.ChromeOptions()
    options.add_argument("--disable-gpu")
    options.add_argument("--no-sandbox")
    options.add_argument("--disable-dev-shm-usage")
    options.add_argument("--disable-blink-features=AutomationControlled")
    options.set_capability('LT:Options', _xoptions)
    # options.add_argument(f"user-agent={get_random_user_agent()}")
    user_agent = get_random_user_agent()
    options.add_argument(f"--user-agent={user_agent}")
    print("üÜï Kh·ªüi t·∫°o tr√¨nh duy·ªát v·ªõi User-Agent m·ªõi.")
    return uc.Chrome(headless=False, options=options)

# === Crawl t·ª´ng s·∫£n ph·∫©m ===
driver = create_driver()
data = []
header = ["ID","Type","SKU","Name","Published","Is featured?","Visibility in catalog","Short description","Description",
          "Date sale price starts","Date sale price ends","Tax status","Tax class","In stock?","Stock","Low stock amount",
          "Backorders allowed?","Sold individually?","Weight (kg)","Length (cm)","Width (cm)","Height (cm)","Allow customer reviews?",
          "Purchase note","Sale price","Regular price","Categories","Tags","Shipping class","Images",
          "Download limit","Download expiry days","Parent","Grouped products","Upsells","Cross-sells",
          "External URL","Button text","Position",
          "Attribute 1 name","Attribute 1 value(s)","Attribute 1 visible","Attribute 1 global","Attribute 1 default",
          "Attribute 2 name","Attribute 2 value(s)","Attribute 2 visible","Attribute 2 global","Attribute 2 default",
          "Attribute 3 name","Attribute 3 value(s)","Attribute 3 visible","Attribute 3 global","Attribute 3 default",
          "Meta: hwp_product_gtin"]

def add_data(url,sku_prefix,price_value,description,driver):
    driver.get(url)
    product_links = []
    while True:
        try:
            # if(count == 41): break
            # count = count + 1 
            # ƒê·ª£i trang t·∫£i ho√†n t·∫•t tr∆∞·ªõc khi l·∫•y d·ªØ li·ªáu
            WebDriverWait(driver, 15).until(
                EC.presence_of_element_located((By.TAG_NAME, 'body'))
            )
            # time.sleep(3)
            # L·∫•y t·∫•t c·∫£ ·∫£nh s·∫£n ph·∫©m tr√™n trang hi·ªán t·∫°i
            links = driver.find_elements(By.CSS_SELECTOR, "a[aria-label]:not([class])")
            print('links', len(links)) 
            # L∆∞u danh s√°ch c√°c link s·∫£n ph·∫©m
            for link in links:
                href = link.get_attribute("href")
                if href and href not in product_links:
                    # if check_publish_date(browser, href):
                    product_links.append(href)

            # Ki·ªÉm tra xem c√≥ n√∫t next page hay kh√¥ng
            try:
                next_button = WebDriverWait(driver, 5).until(
                    EC.element_to_be_clickable((By.CSS_SELECTOR, "a.next"))
                )
                aria_disabled = next_button.get_attribute("aria-disabled")

                if aria_disabled == "true":
                    break  # Kh√¥ng c√≤n trang ti·∫øp theo

                next_button.click()

                # ƒê·ª£i trang m·ªõi t·∫£i ho√†n t·∫•t
                # WebDriverWait(browser, 10).until(
                #     EC.staleness_of(images[0])  # Ch·ªù cho trang c≈© bi·∫øn m·∫•t
                # )
            except (NoSuchElementException, TimeoutException):
                break

        except TimeoutException:
            print("Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ mong mu·ªën, tho√°t ch∆∞∆°ng tr√¨nh.")
            break


    print('product_links' , len(product_links) ,product_links[len(product_links) -1])

    # 3Ô∏è‚É£ Crawl d·ªØ li·ªáu t·ª´ng s·∫£n ph·∫©m
    record = 0
    for index, link in enumerate(product_links):
        try:
            driver.get(link)
            print(f"üîç ƒêang l·∫•y d·ªØ li·ªáu t·ª´: {link} ({index + 1}/{len(product_links)})")
            # S·ª≠ d·ª•ng WebDriverWait thay v√¨ time.sleep()
            WebDriverWait(driver, 5).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, 'h1.product-title'))
            )

            # T√¨m danh s√°ch m√†u s·∫Øc (n·∫øu c√≥)
            color_buttons = driver.find_elements(By.CSS_SELECTOR, 'a[data-trk-id="color-selector"]')

            if color_buttons:
                for button in color_buttons:                    
                    try:
                        driver.execute_script("arguments[0].click();", button)
                        time.sleep(1)  # Gi·∫£m th·ªùi gian sleep
                        name_element = driver.find_element(By.CSS_SELECTOR, 'h1.product-title')
                        name = name_element.text.strip() if name_element else "N/A"
                        # L·∫•y danh s√°ch ·∫£nh sau khi ch·ªçn m√†u
                        image_main = driver.find_elements(By.CSS_SELECTOR, 'img.skip-lazy')
                        image_main_src = image_main[0].get_attribute("src") if image_main else ""
                        img_elements = driver.find_elements(By.XPATH,'//img[@class="attachment-woocommerce_thumbnail"]')
                        img_links = [img.get_attribute("src") for img in img_elements] 

                        # L∆∞u d·ªØ li·ªáu
                        img_links_str = ", ".join(img_links) if img_links else image_main_src
                        data.append([
                            "", "simple", f"{sku_prefix}-{100000 + 2 * record}", name, 1, 0, "visible", "", description, "", "", "taxable", "", 1, "", "", 0, 0,
                            "", "", "", "", 1, "", "", price_value, sku_prefix, sku_prefix, "", img_links_str,
                            "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",""
                        ])
                        record = record+1
                        print(f"‚úÖ {name} ({len(img_links)} ·∫£nh)")
                    except Exception as e:
                        print(f"‚ö†Ô∏è L·ªói khi click m√†u: {e}")
            else:
                name_element = driver.find_element(By.CSS_SELECTOR, 'h1.product-title')
                name = name_element.text.strip() if name_element else "N/A"
                image_main = driver.find_elements(By.CSS_SELECTOR, 'img.skip-lazy')
                image_main_src = image_main[0].get_attribute("src") if image_main else ""
                img_elements = driver.find_elements(By.XPATH,'//img[@class="attachment-woocommerce_thumbnail"]')
                img_links = [img.get_attribute("src") for img in img_elements]
                img_links_str = ", ".join(img_links) if img_links else image_main_src
                data.append([
                    "", "simple", f"{sku_prefix}-{100000 + 2 * record}", name, 1, 0, "visible", "", description, "", "", "taxable", "", 1, "", "", 0, 0,
                    "", "", "", "", 1, "", "", price_value, sku_prefix, sku_prefix, "", img_links_str,
                    "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",""
                ])
                record = record+1
                print(f"‚úÖ {name} ({len(img_links)} ·∫£nh)")

        except Exception as e:
            print(f"‚ùå L·ªói khi crawl {link}: {e}")
            driver.quit()
            # time.sleep(10)
            driver = create_driver()
    return driver

for idx, url in enumerate(urls):

    sku_prefix = extra_data[idx] if idx < len(extra_data) else "SKU"
    description = desc_data[idx] if idx < len(desc_data) else ""
    price = price_data[idx] if idx < len(price_data) else "0"
    # sku = f"{sku_prefix}-{100000 + 2 * idx}"

    try:
        add_data(url,sku_prefix,price,description,driver)
    except Exception as e:
        print(f"‚ùå L·ªói t·∫°i {url}: {e}")

driver.quit()
df = pd.DataFrame(data, columns=header)
df.to_csv("woo_products.csv", index=False, encoding="utf-8-sig")
print("üéâ Ho√†n t·∫•t! D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o woo_products.csv")
